{"version":3,"file":"static/js/641.30fae766.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Posts.module.css?ee55","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__hSKEO\",\"contact\":\"ProfileInfo_contact__cl-VC\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusWithHooks = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusWithHooks> = ({status, updateStatus}) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [statuses, setStatuses] = useState<string>(status)\r\n    useEffect(() => {setStatuses(status)}, [status])\r\n    const activateMode = () => setEditMode(true)\r\n    const deActivateMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(statuses)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {setStatuses(e.currentTarget.value)}\r\n    return (\r\n        <div>{!editMode &&\r\n            <div>\r\n                <b>Status:    </b>\r\n                <span onDoubleClick={activateMode}>{status || \"------\"}</span>\r\n            </div>}\r\n            {editMode &&\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    placeholder={\"Напиши свой статус\"}\r\n                    onBlur={deActivateMode}\r\n                    autoFocus={true}\r\n                    value={statuses}/>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport style from './ProfileInfo.module.css';\r\n\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../api/api\";\r\nimport {CreateField, Input, Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\ntype ProfileDataFormPropsType = {\r\n    fullName: string\r\n    lookingForAJob: boolean\r\n    aboutMe: string\r\n    lookingForAJobDescription: string\r\n}\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileDataFormPropsType, PropsType> & PropsType> = ({\r\n                                                                                                           profile,\r\n                                                                                                           error,\r\n                                                                                                           handleSubmit\r\n                                                                                                       }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>save</button>\r\n            </div>\r\n            {error && <div className={style.formError}>{error}</div>}\r\n\r\n            <div>\r\n                <b>Full Name</b>: {CreateField(\"Full name\", \"fullName\", [], Input)}\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job</b>: {CreateField(\"\", \"lookingForAJob\", [], Input, {type: \"checkbox\"})}\r\n            </div>\r\n            <div>\r\n                <b>My professional\r\n                    skills</b>:{CreateField(\"My professional skills\", \"lookingForAJobDescription\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>About Me</b>:{CreateField(\"About Me\", \"aboutMe\", [], Textarea)}\r\n            </div>\r\n            <div>\r\n                <b>Contacts</b>:{profile.contacts && Object.keys(profile.contacts).map(key => {\r\n                return <div key={key} className={style.contact}>\r\n                    <b>\r\n                        {key}:{CreateField(key, \"contacts.\" + key, [], Input)}\r\n                    </b>\r\n                </div>\r\n            })}\r\n            </div>\r\n            {/*<div>Contacts: {*/}\r\n            {/*    profile.contacts && Object.keys(profile.contacts).map((key) => {*/}\r\n            {/*        const contactsKey = profile?.contacts*/}\r\n            {/*            ? profile.contacts[key as keyof ContactType]*/}\r\n            {/*            : ''*/}\r\n            {/*        return (*/}\r\n            {/*            <Contact*/}\r\n            {/*                key={key}*/}\r\n            {/*                contactTitle={key}*/}\r\n            {/*                contactValue={contactsKey}/>*/}\r\n            {/*        )*/}\r\n            {/*    })}</div>*/}\r\n        </form>\r\n    );\r\n};\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfileDataFormPropsType, PropsType>({form: 'edit-profile'})(ProfileDataForm)","import React, {useState} from 'react';\r\nimport mainImg from \"./voleibol-2.jpg\";\r\nimport style from './ProfileInfo.module.css';\r\nimport {ContactType, ProfileType} from \"../../../api/api\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport PhotoProfile from './ava_2_anders.png'\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: null | ProfileType,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n    isOwner: boolean,\r\n    savePhoto: (file: File) => void\r\n    saveProfile: any\r\n}\r\nexport type ContactsType = {\r\n    contactTitle: string\r\n    contactValue: string | null\r\n}\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({\r\n                                                                profile,\r\n                                                                status,\r\n                                                                updateStatus,\r\n                                                                isOwner,\r\n                                                                savePhoto,\r\n                                                                saveProfile\r\n                                                            }) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n    const onMainPhotoSelected = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = async (formData: any) => {\r\n        await saveProfile(formData)\r\n                setEditMode(false)\r\n    }\r\n    return (\r\n        <div>\r\n            <div><img src={mainImg} alt=\"Main image\"/></div>\r\n            <div className={style.descriptionBlock}>\r\n                <img src={profile.photos?.small || PhotoProfile} alt=\"ava\"/>\r\n                <div>\r\n                    {isOwner &&\r\n                        <input\r\n                            type=\"file\"\r\n                            onChange={onMainPhotoSelected}/>}\r\n                </div>\r\n\r\n                {/*   <div>\r\n                    <div>Full Name: {profile.fullName}</div>\r\n                    <div>\r\n                        <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                    </div>\r\n                    {profile.lookingForAJob &&\r\n                        <div>\r\n                            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                        </div>}\r\n                    <div>About Me: {profile.aboutMe}</div>\r\n                </div>*/}\r\n                {editMode\r\n                    ? <ProfileDataFormReduxForm\r\n                        onSubmit={onSubmit}\r\n                        profile={profile}\r\n                        initialValues={profile}/>\r\n                    : <ProfileData\r\n                        goToEditMode={() => {\r\n                            setEditMode(true)\r\n                        }}\r\n                        isOwner={isOwner}\r\n                        profile={profile}/>}\r\n                {/*<ProfileData profile={profile}/>*/}\r\n\r\n                {/*<div>UserId: {profile.userId}</div>\r\n                <div>\r\n                    <div>Full Name: {profile.fullName}</div>\r\n                    <div>\r\n                        <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n                    </div>\r\n                    {profile.lookingForAJob &&\r\n                        <div>\r\n                            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n                        </div>}\r\n                    <div>About Me: {profile.aboutMe}</div>\r\n\r\n                    <div>Contacts: {\r\n\r\n                        profile.contacts &&\r\n                        Object.keys(profile.contacts).map((key) => {\r\n\r\n                            const contactsKey = profile?.contacts ? profile.contacts[key as keyof ContactType] : ''\r\n                            return (\r\n                                <Contact\r\n                                    key={key}\r\n                                    contactTitle={key}\r\n                                    contactValue={contactsKey}/>\r\n                            )\r\n                        })}\r\n                    </div>\r\n                </div>*/}\r\n            </div>\r\n            <div>\r\n                <ProfileStatusWithHooks\r\n                    updateStatus={updateStatus}\r\n                    status={status}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport const Contact = ({contactTitle, contactValue}: ContactsType) => {\r\n    return (\r\n        <div className={style.contact}>\r\n            <b>{contactTitle}</b>:{contactValue}\r\n        </div>\r\n    )\r\n}\r\nexport const ProfileData = ({\r\n                                profile,\r\n                                isOwner,\r\n                                goToEditMode\r\n                            }: { goToEditMode: () => void, profile: ProfileType, isOwner: boolean }) => {\r\n\r\n    return (\r\n        <div>\r\n            {isOwner && <div>\r\n                <button onClick={goToEditMode}>edit</button>\r\n            </div>}\r\n            <div>Full Name: {profile.fullName}</div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob && <div><b>My professional skills</b>: {profile.lookingForAJobDescription}</div>}\r\n            <div>About Me: {profile.aboutMe}</div>\r\n            <div>Contacts: {\r\n\r\n                profile.contacts && Object.keys(profile.contacts).map((key) => {\r\n                    const contactsKey = profile?.contacts\r\n                        ? profile.contacts[key as keyof ContactType]\r\n                        : ''\r\n                    return (\r\n                        <Contact\r\n                            key={key}\r\n                            contactTitle={key}\r\n                            contactValue={contactsKey}/>\r\n                    )\r\n                })}</div>\r\n        </div>\r\n    )\r\n}\r\n/*export const ProfileDataForm = ({profile}: { profile: ProfileType }) => {\r\n    debugger\r\n    return (\r\n        <div>\r\nForm\r\n\r\n           {/!* <div>Full Name: {profile.fullName}</div>\r\n            <div>\r\n                <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n            </div>\r\n            {profile.lookingForAJob && <div><b>My professional skills</b>: {profile.lookingForAJobDescription}</div>}\r\n            <div>About Me: {profile.aboutMe}</div>\r\n            <div>Contacts: {\r\n\r\n                profile.contacts && Object.keys(profile.contacts).map((key) => {\r\n                    const contactsKey = profile?.contacts\r\n                        ? profile.contacts[key as keyof ContactType]\r\n                        : ''\r\n                    return (\r\n                        <Contact\r\n                            key={key}\r\n                            contactTitle={key}\r\n                            contactValue={contactsKey}/>\r\n                    )\r\n                })}</div>*!/}\r\n        </div>\r\n    )\r\n}*/\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Posts_content__dxmm8\",\"item\":\"Posts_item__Z+4zD\",\"posts\":\"Posts_posts__sqZWu\"};","import React from 'react';\r\nimport style from './Posts.module.css'\r\nimport avatar_user from './Avatar_user.png'\r\n\r\ntype PostType = {\r\n    postTitle: string,\r\n    numberOfLikes: number\r\n}\r\nexport const Post = (props: PostType) => {\r\n    return <div className={style.item}>\r\n        <img src={avatar_user} alt=\"avatar\"/>\r\n        {props.postTitle}\r\n        <div>\r\n            <span>like {props.numberOfLikes}</span>\r\n        </div>\r\n    </div>\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__+pHan\",\"posts\":\"MyPosts_posts__KG2SH\"};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utilts/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\ntype AddNewPostFormPropsType = {\r\n    onSubmit: (newPostText: any) => void\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormPropsType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"}\r\n                       component={Textarea}\r\n                       placeholder={\"Post message\"}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            {/*<textarea*/}\r\n            {/*    placeholder={\"Напиши новый пост\"}*/}\r\n            {/*    value={props.newPostText}*/}\r\n            {/*    onChange={props.onPostChange}/>*/}\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\nexport const AddNewPostFormRedux = reduxForm<AddNewPostFormPropsType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)","import React from 'react';\r\nimport {Post} from \"./Post/Post\";\r\nimport style from './MyPosts.module.css';\r\nimport {AddNewPostFormRedux} from \"./AddNewPostForm\";\r\nimport {PostsType} from \"../../../api/api\";\r\n\r\ntype MyPostsType = {\r\n    addPosts: (newPostText:string) => void\r\n    posts: PostsType[]\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostsType) => {\r\n    console.log('render')\r\n    let postsElement = props.posts.map((data) =>\r\n        <Post\r\n            key={data.id}\r\n            numberOfLikes={data.numberOfLikes}\r\n            postTitle={data.postTitle}/>\r\n    )\r\n    const onAddPost = (values: any) => {\r\n        props.addPosts(values.newPostText)\r\n    }\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            <h2>My posts</h2>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={style.posts}>{postsElement}</div>\r\n        </div>\r\n    );\r\n});","import React from 'react';\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {addPostAC} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {PostsType} from \"../../../api/api\";\r\n\r\nexport type MePostsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostsType>,\r\n    newPostText: string\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPosts: (newPostText:string) => void\r\n}\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPosts: (newPostText:string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\n//Над компонентой MyPosts создается контейнерная компонента, а внутри контейнерной написан код который\r\n// обращается к стору, подписывается на него, берет стейт, засовывает стейт в функцию mapStateToProps,\r\n// чтобы конкретно понять что из этого нужно нашей компоненте, заием сравнивает данные которые уже есть\r\n// и если данные изменились компонента перерисовается, также и происходит с mapDispatchToProps. Так\r\n// работает connect\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../api/api\";\r\ntype ProfilePropsType={\r\n    status:string\r\n    profile:null | ProfileType\r\n    updateStatus:(status: string) => void\r\n    isOwner:boolean\r\n    savePhoto:(file:any)=>void\r\n    saveProfile:(profile:ProfileType)=>void\r\n}\r\nexport const Profile: React.FC<ProfilePropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                status={props.status}\r\n                profile={props.profile}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n                />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {compose} from \"redux\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {\r\n    getUserProfileThunkCreator,\r\n    getUserStatusThunkCreator, savePhotoThunkCreator, saveProfileThunkCreator,\r\n    updateStatusThunkCreator\r\n} from \"../../redux/profile-reducer\";\r\nimport {ProfileType} from \"../../api/api\";\r\n\r\ntype PathParamsType = {\r\n    userId: any,\r\n}\r\nexport type ProfileContainerPropsType = RouteComponentProps<PathParamsType> & UserProfileTypeProps\r\nexport type UserProfileTypeProps = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n    profile: null | ProfileType,\r\n    status: string,\r\n    authUserId: null | number,\r\n    isAuth: boolean,\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: null | number) => void,\r\n    getStatus: (userId: null | number) => void,\r\n    updateStatus: (status: string) => void,\r\n    savePhoto:(file:any)=>void\r\n    saveProfile:(profile:ProfileType)=>void\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authUserId\r\n            if (!userId) {\r\n                this.props.history.push('./login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n\r\n    }\r\n\r\n    render() {\r\n        //if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return (\r\n            <div><Profile\r\n                //saveProfile={this.props.saveProfile}\r\n                isOwner={!this.props.match.params.userId}\r\n                {...this.props}/></div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n//let WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n//export const withAuthRedirect(withRouter(connect(mapStateToProps, {getUserProfile: getUserProfileThunkCreator})(ProfileContainer)))\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileThunkCreator,\r\n        updateStatus: updateStatusThunkCreator,\r\n        getStatus: getUserStatusThunkCreator,\r\n        savePhoto:savePhotoThunkCreator,\r\n        saveProfile:saveProfileThunkCreator\r\n    }),\r\n    withRouter,\r\n)(ProfileContainer)\r\n"],"names":["ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","statuses","setStatuses","useEffect","onDoubleClick","onChange","e","currentTarget","value","placeholder","onBlur","autoFocus","ProfileDataFormReduxForm","reduxForm","form","profile","error","handleSubmit","onSubmit","className","style","CreateField","Input","type","Textarea","contacts","Object","keys","map","key","ProfileInfo","isOwner","savePhoto","saveProfile","Preloader","formData","src","mainImg","alt","photos","small","PhotoProfile","target","files","length","initialValues","ProfileData","goToEditMode","Contact","contactTitle","contactValue","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactsKey","Post","props","avatar_user","postTitle","numberOfLikes","maxLength10","maxLengthCreator","AddNewPostFormRedux","Field","name","component","validate","required","MyPosts","React","console","log","postsElement","posts","data","id","values","addPosts","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","this","match","params","authUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","snapshot","compose","auth","isAuth","getUserProfileThunkCreator","updateStatusThunkCreator","getUserStatusThunkCreator","savePhotoThunkCreator","saveProfileThunkCreator","withRouter"],"sourceRoot":""}