{"version":3,"file":"static/js/415.0f204ff2.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Profile/ProfileInfo/ProfileInfo.module.css?ead2","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/Post/Posts.module.css?ee55","components/Profile/MyPosts/Post/Post.tsx","webpack://samurai-way/./src/components/Profile/MyPosts/MyPosts.module.css?831b","components/Profile/MyPosts/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__hSKEO\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusWithHooks = {\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\n// const onStatusChange = (e: any) => {\r\n//     ({\r\n//         status: e.currentTarget.value\r\n//     })\r\n// }\r\nexport const ProfileStatusWithHooks: React.FC<ProfileStatusWithHooks> = ({status, updateStatus}) => {\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [statuses, setStatuses] = useState<string>(status)\r\n    useEffect(() => {\r\n        setStatuses(status)\r\n    }, [status])\r\n    const activateMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deActivateMode = () => {\r\n        setEditMode(false)\r\n        updateStatus(statuses)\r\n    }\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatuses(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>{!editMode && <span onDoubleClick={activateMode}>{status || \"------\"}</span>}\r\n            {editMode &&\r\n                <input\r\n                    onChange={onStatusChange}\r\n                    placeholder={\"Напиши свой статус\"}\r\n                    onBlur={deActivateMode}\r\n                    autoFocus={true}\r\n                    value={statuses}/>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport mainImg from \"./voleibol-2.jpg\";\r\nimport style from './ProfileInfo.module.css';\r\nimport {ProfileType} from \"../../../api/api\";\r\nimport {Preloader} from \"../../Common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\n\r\ntype ProfileInfoPropsType = {\r\n    profile: null | ProfileType,\r\n    status: string,\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileInfo: React.FC<ProfileInfoPropsType> = ({profile, status, updateStatus}) => {\r\n    if (!profile) { return <Preloader/>}\r\n    return (\r\n        <div>\r\n            <div><img src={mainImg} alt=\"Main image\"/></div>\r\n            <div className={style.descriptionBlock}>\r\n                <img src={profile.photos.small != null ? profile.photos.small : ''} alt=\"ava\"/>\r\n                <div>UserId: {profile.userId}</div>\r\n                <div>About Me: {profile.aboutMe}</div>\r\n                <div>Full Name: {profile.fullName}</div>\r\n                <div>Status: {status}</div>\r\n            </div>\r\n            <div>\r\n                <ProfileStatusWithHooks\r\n                    updateStatus={updateStatus}\r\n                    status={status}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Posts_content__dxmm8\",\"item\":\"Posts_item__Z+4zD\",\"posts\":\"Posts_posts__sqZWu\"};","import React from 'react';\r\nimport style from './Posts.module.css'\r\nimport avatar_user from './Avatar_user.png'\r\n\r\ntype PostType = {\r\n    postTitle: string,\r\n    numberOfLikes: number\r\n}\r\nexport const Post = (props: PostType) => {\r\n    return <div className={style.item}>\r\n        <img src={avatar_user} alt=\"avatar\"/>\r\n        {props.postTitle}\r\n        <div>\r\n            <span>like {props.numberOfLikes}</span>\r\n        </div>\r\n    </div>\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__+pHan\",\"posts\":\"MyPosts_posts__KG2SH\"};","import React from 'react';\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../utilts/validators/validators\";\r\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\r\n\r\ntype AddNewPostFormPropsType = {\r\n    onSubmit: (newPostText: any) => void\r\n}\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<AddNewPostFormPropsType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name={\"newPostText\"}\r\n                       component={Textarea}\r\n                       placeholder={\"Post message\"}\r\n                       validate={[required, maxLength10]}\r\n                />\r\n            </div>\r\n            {/*<textarea*/}\r\n            {/*    placeholder={\"Напиши новый пост\"}*/}\r\n            {/*    value={props.newPostText}*/}\r\n            {/*    onChange={props.onPostChange}/>*/}\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\nexport const AddNewPostFormRedux = reduxForm<AddNewPostFormPropsType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)","import React from 'react';\r\nimport {Post} from \"./Post/Post\";\r\nimport style from './MyPosts.module.css';\r\nimport {AddNewPostFormRedux} from \"./AddNewPostForm\";\r\nimport {PostsType} from \"../../../api/api\";\r\n\r\ntype MyPostsType = {\r\n    addPosts: (newPostText:string) => void\r\n    posts: PostsType[]\r\n}\r\n\r\nexport const MyPosts = React.memo((props: MyPostsType) => {\r\n    console.log('render')\r\n    let postsElement = props.posts.map((data) =>\r\n        <Post\r\n            key={data.id}\r\n            numberOfLikes={data.numberOfLikes}\r\n            postTitle={data.postTitle}/>\r\n    )\r\n    const onAddPost = (values: any) => {\r\n        props.addPosts(values.newPostText)\r\n    }\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            <h2>My posts</h2>\r\n            <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n            <div className={style.posts}>{postsElement}</div>\r\n        </div>\r\n    );\r\n});","import React from 'react';\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {addPostAC} from \"../../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {PostsType} from \"../../../api/api\";\r\n\r\nexport type MePostsPropsType = mapStateToPropsType & mapDispatchToPropsType\r\ntype mapStateToPropsType = {\r\n    posts: Array<PostsType>,\r\n    newPostText: string\r\n}\r\n\r\ntype mapDispatchToPropsType = {\r\n    addPosts: (newPostText:string) => void\r\n}\r\nlet mapStateToProps = (state: AppStateType): mapStateToPropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchToPropsType => {\r\n    return {\r\n        addPosts: (newPostText:string) => {\r\n            dispatch(addPostAC(newPostText))\r\n        }\r\n    }\r\n}\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)","import React from 'react';\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileContainerPropsType} from \"./ProfileContainer\";\r\n\r\nexport const Profile: React.FC<ProfileContainerPropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                status={props.status}\r\n                profile={props.profile}\r\n                updateStatus={props.updateStatus}\r\n                />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    );\r\n};","import React from 'react';\r\nimport {compose} from \"redux\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {\r\n    getUserProfileThunkCreator,\r\n    getUserStatusThunkCreator,\r\n    updateStatusThunkCreator\r\n} from \"../../redux/profile-reducer\";\r\nimport {ProfileType} from \"../../api/api\";\r\n\r\ntype PathParamsType = {\r\n    userId: any,\r\n}\r\nexport type ProfileContainerPropsType = RouteComponentProps<PathParamsType> & UserProfileTypeProps\r\nexport type UserProfileTypeProps = MapStateToPropsType & MapDispatchToPropsType\r\ntype MapStateToPropsType = {\r\n    profile: null | ProfileType,\r\n    status: string,\r\n    authUserId:null | number,\r\n    isAuth:boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    getUserProfile: (userId: null | number) => void,\r\n    getStatus: (userId: null | number) => void,\r\n    updateStatus:(status: string) => void,\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authUserId\r\n            if (!userId){\r\n                this.props.history.push('./login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    render() {\r\n        //if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return (\r\n            <div><Profile {...this.props}/></div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authUserId:state.auth.id,\r\n        isAuth:state.auth.isAuth\r\n    }\r\n}\r\n\r\n//let WithUrlDataContainerComponent = withRouter(ProfileContainer)\r\n//export const withAuthRedirect(withRouter(connect(mapStateToProps, {getUserProfile: getUserProfileThunkCreator})(ProfileContainer)))\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfile: getUserProfileThunkCreator,\r\n        updateStatus: updateStatusThunkCreator,\r\n        getStatus:getUserStatusThunkCreator\r\n    }),\r\n    withRouter,\r\n    \r\n)(ProfileContainer)\r\n"],"names":["ProfileStatusWithHooks","status","updateStatus","useState","editMode","setEditMode","statuses","setStatuses","useEffect","onDoubleClick","onChange","e","currentTarget","value","placeholder","onBlur","autoFocus","ProfileInfo","profile","src","mainImg","alt","className","style","photos","small","userId","aboutMe","fullName","Preloader","Post","props","avatar_user","postTitle","numberOfLikes","maxLength10","maxLengthCreator","AddNewPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","validate","required","MyPosts","React","console","log","postsElement","posts","map","data","id","values","addPosts","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostAC","Profile","ProfileContainer","this","match","params","authUserId","history","push","getUserProfile","getStatus","compose","auth","isAuth","getUserProfileThunkCreator","updateStatusThunkCreator","getUserStatusThunkCreator","withRouter"],"sourceRoot":""}